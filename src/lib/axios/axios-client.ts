import type { AxiosError, AxiosInstance, AxiosResponse } from "axios";
import axios from "axios";
import { API_BASE_URL, DEFAULT_HEADERS } from "@/lib/constants/api-constants";

/**
 * Cliente Axios configurado para todas as requisi√ß√µes da API
 * Usa API_KEY do projeto em vez de JWT tokens
 */
class AxiosClient {
  private instance: AxiosInstance;
  private apiKey: string;

  constructor() {
    this.apiKey = process.env.NEXT_PUBLIC_API_KEY || process.env.API_KEY || "";

    this.instance = axios.create({
      baseURL: API_BASE_URL,
      timeout: 15000, // 15 segundos - aumentado para melhor estabilidade
      headers: {
        ...DEFAULT_HEADERS,
        Accept: "application/json",
        "Cache-Control": "no-cache",
      },
    });

    this.setupInterceptors();
  }

  /**
   * Configura interceptors para requisi√ß√µes e respostas
   */
  private setupInterceptors(): void {
    // Interceptor para requisi√ß√µes
    this.instance.interceptors.request.use(
      (config) => {
        // Adicionar API_KEY ao body das requisi√ß√µes POST/PUT/PATCH
        if (
          config.method &&
          ["post", "put", "patch"].includes(config.method.toLowerCase())
        ) {
          const data = config.data || {};
          config.data = {
            ...data,
            API_KEY: this.apiKey,
          };
        }

        // Adicionar API_KEY aos par√¢metros para requisi√ß√µes GET/DELETE
        if (
          config.method &&
          ["get", "delete"].includes(config.method.toLowerCase())
        ) {
          config.params = {
            ...config.params,
            API_KEY: this.apiKey,
          };
        }

        // Log apenas em desenvolvimento
        if (process.env.NODE_ENV === "development") {
          console.log(`üöÄ [${config.method?.toUpperCase()}] ${config.url}`);
        }

        return config;
      },
      (error) => {
        console.error("‚ùå [Request Error]", error);
        return Promise.reject(error);
      },
    );

    // Interceptor para respostas
    this.instance.interceptors.response.use(
      (response: AxiosResponse) => {
        // Log apenas em desenvolvimento
        if (process.env.NODE_ENV === "development") {
          console.log(`‚úÖ [${response.status}] ${response.config.url}`);
        }
        return response;
      },
      (error: AxiosError) => {
        // Tratamento global de erros
        this.handleResponseError(error);
        return Promise.reject(error);
      },
    );
  }

  /**
   * Trata erros de resposta de forma global
   */
  private handleResponseError(error: AxiosError): void {
    const status = error.response?.status;
    const url = error.config?.url;

    // Log estruturado do erro
    if (process.env.NODE_ENV === "development") {
      console.error(`‚ùå [${status}] ${url}:`, {
        message: error.message,
        data: error.response?.data,
      });
    }

    // Tratamento espec√≠fico por c√≥digo de status
    switch (status) {
      case 400:
        console.warn("Requisi√ß√£o inv√°lida - verifique os dados enviados");
        break;
      case 401:
        console.warn("API_KEY inv√°lida ou ausente");
        this.handleUnauthorized();
        break;
      case 403:
        console.warn("Acesso negado - API_KEY sem permiss√µes suficientes");
        break;
      case 404:
        console.warn("Endpoint n√£o encontrado");
        break;
      case 429:
        console.warn("Muitas requisi√ß√µes - limite de rate excedido");
        break;
      case 500:
        console.error("Erro interno do servidor");
        break;
      case 502:
      case 503:
      case 504:
        console.error("Servi√ßo indispon√≠vel temporariamente");
        break;
      default:
        if (process.env.NODE_ENV === "development") {
          console.error("Erro n√£o categorizado na API:", error.message);
        }
    }
  }

  /**
   * Obt√©m a API_KEY configurada
   */
  public getApiKey(): string {
    return this.apiKey;
  }

  /**
   * Verifica se a API_KEY est√° configurada
   */
  public isApiKeyConfigured(): boolean {
    return Boolean(this.apiKey && this.apiKey.length > 0);
  }

  /**
   * Trata erro de API_KEY inv√°lida
   */
  private handleUnauthorized(): void {
    console.warn(
      "API_KEY inv√°lida ou ausente. Verifique as vari√°veis de ambiente.",
    );

    // Em desenvolvimento, mostrar dica √∫til
    if (process.env.NODE_ENV === "development") {
      console.info(
        "üí° Dica: Verifique se a vari√°vel API_KEY est√° definida no arquivo .env",
      );
    }
  }

  /**
   * Retorna a inst√¢ncia do axios
   */
  public getInstance(): AxiosInstance {
    return this.instance;
  }

  /**
   * M√©todos de conveni√™ncia para requisi√ß√µes
   */
  public get<T = unknown>(
    url: string,
    config?: Record<string, unknown>,
  ): Promise<AxiosResponse<T>> {
    return this.instance.get<T>(url, config);
  }

  public post<T = unknown>(
    url: string,
    data?: unknown,
    config?: Record<string, unknown>,
  ): Promise<AxiosResponse<T>> {
    return this.instance.post<T>(url, data, config);
  }

  public put<T = unknown>(
    url: string,
    data?: unknown,
    config?: Record<string, unknown>,
  ): Promise<AxiosResponse<T>> {
    return this.instance.put<T>(url, data, config);
  }

  public patch<T = unknown>(
    url: string,
    data?: unknown,
    config?: Record<string, unknown>,
  ): Promise<AxiosResponse<T>> {
    return this.instance.patch<T>(url, data, config);
  }

  public delete<T = unknown>(
    url: string,
    config?: Record<string, unknown>,
  ): Promise<AxiosResponse<T>> {
    return this.instance.delete<T>(url, config);
  }
}

// Inst√¢ncia √∫nica do cliente
const axiosClient = new AxiosClient();

export default axiosClient;
export { AxiosClient };
