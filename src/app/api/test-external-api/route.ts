import { NextResponse } from "next/server";
import { CheckServiceApi } from "@/services/api/check/check-service-api";

export async function GET() {
  try {
    // Verificar configura√ß√£o da API
    console.log("üîß Configura√ß√£o da API:");
    console.log("- EXTERNAL_API_BASE_URL:", process.env.EXTERNAL_API_BASE_URL);
    console.log("- API_KEY:", process.env.API_KEY ? "[SET]" : "[NOT SET]");

    // Primeiro, testar se a API est√° online
    console.log("üîç Testando status da API externa...");

    try {
      const status = await CheckServiceApi.getApiStatus();
      console.log("‚úÖ API Status:", status);
    } catch (statusError) {
      console.error("‚ùå Erro no status da API:", statusError);
      console.error("Stack trace:", statusError);
      return NextResponse.json(
        {
          success: false,
          error: "API externa n√£o est√° respondendo",
          details:
            statusError instanceof Error
              ? statusError.message
              : "Erro desconhecido",
          config: {
            baseUrl: process.env.EXTERNAL_API_BASE_URL,
            hasApiKey: !!process.env.API_KEY,
          },
        },
        { status: 503 },
      );
    }

    // Testar verifica√ß√£o de email
    console.log("üîç Testando verifica√ß√£o de email...");
    const emailResult = await CheckServiceApi.checkEmail("teste@email.com");
    console.log("‚úÖ Email Result:", emailResult);

    return NextResponse.json({
      success: true,
      message: "API externa funcionando corretamente",
      config: {
        baseUrl: process.env.EXTERNAL_API_BASE_URL,
        hasApiKey: !!process.env.API_KEY,
      },
      tests: {
        status: "‚úÖ OK",
        email: emailResult,
      },
    });
  } catch (error) {
    console.error("‚ùå Erro ao testar API externa:", error);

    return NextResponse.json(
      {
        success: false,
        error: "Erro ao conectar com a API externa",
        details: error instanceof Error ? error.message : "Erro desconhecido",
      },
      { status: 500 },
    );
  }
}
