generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                    String    @id
  accountId             String    @db.Text
  providerId            String    @db.Text
  userId                String
  accessToken           String?   @db.Text
  refreshToken          String?   @db.Text
  idToken               String?   @db.Text
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?   @db.Text
  password              String?   @db.Text
  createdAt             DateTime  @default(now())
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "tbl_account_userId_fkey")
  @@map("tbl_account")
}

model Invitation {
  id               String           @id
  organizationId   String
  email            String           @db.Text
  role             String?          @db.Text
  status           String           @db.Text
  expiresAt        DateTime
  inviterId        String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([inviterId], map: "tbl_invitation_inviterId_fkey")
  @@index([organizationId], map: "tbl_invitation_organizationId_fkey")
  @@map("tbl_invitation")
}

model Member  {
  id               String           @id
  organizationId   String
  userId           String
  role             String           @db.Text
  createdAt        DateTime
  organization     Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([organizationId], map: "tbl_member_organizationId_fkey")
  @@index([userId], map: "tbl_member_userId_fkey")
  @@map("tbl_member")
}

model Organization {
  id             String           @id
  name           String           @db.Text
  slug           String?          @unique
  logo           String?          @db.Text
  createdAt      DateTime
  metadata       String?          @db.Text
  invitations    Invitation[]
  members        Member[]
  @@map("tbl_organization")
}

model Session {
  id                   String   @id
  expiresAt            DateTime
  token                String   @unique
  createdAt            DateTime @default(now())
  updatedAt            DateTime
  ipAddress            String?  @db.Text
  userAgent            String?  @db.Text
  userId               String
  activeOrganizationId String?  @db.Text
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "tbl_session_userId_fkey")
  @@map("tbl_session")
}

model User {
  id             String           @id
  name           String           @db.Text
  email          String           @unique
  emailVerified  Boolean          @default(false)
  image          String?          @db.Text
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now())
  accounts      Account[]
  invitations   Invitation[]
  members       Member[]
  sessions      Session[]
   @@map("tbl_user")
  
}

model Verification {
  id         String   @id
  identifier String   @db.Text
  value      String   @db.Text
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  @@map("tbl_verification")
}
